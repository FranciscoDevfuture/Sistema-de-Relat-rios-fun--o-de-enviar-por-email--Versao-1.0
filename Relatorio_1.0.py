#importando bibliotecas necess√°rias
import json
import smtplib
from datetime import datetime
from docx import Document
from email.message import EmailMessage

# Lista de relat√≥rios
relatorios = []

# ---------- Fun√ß√µes Utilit√°rias ----------

def validar_data(data):
    """Valida o formato da data (DD/MM/AAAA)."""
    try:
        datetime.strptime(data, "%d/%m/%Y")
        return True
    except ValueError:
        return False
#Essas duas fun√ß√µes carregar_json() e salvar_json() 
# s√£o respons√°veis por manter os dados dos relat√≥rios salvos 
# de forma permanente em um arquivo .json, permitindo que as informa√ß√µes
# sejam carregadas novamente quando o sistema for reaberto.
def carregar_json():
    """Carrega os relat√≥rios salvos em JSON."""
    global relatorios
    try:
        with open('relatorios.json', 'r', encoding='utf-8') as f:
            relatorios.extend(json.load(f))
    except FileNotFoundError:
        pass

def salvar_json():
    """Salva os relat√≥rios no arquivo JSON."""
    with open('relatorios.json', 'w', encoding='utf-8') as f:
        json.dump(relatorios, f, ensure_ascii=False, indent=4)

# ---------- Funcionalidades do Sistema ----------

def cadastrar_relatorio():
    """Cadastra um novo relat√≥rio."""
    relatorio = {}
    relatorio['id'] = relatorios[-1]['id'] + 1 if relatorios else 1
    relatorio['titulo'] = input("Digite o t√≠tulo do relat√≥rio: ")
    relatorio['descricao'] = input("Digite a descri√ß√£o do relat√≥rio: ")

    while True:
        data = input("Digite a data do relat√≥rio (DD/MM/AAAA): ")
        if validar_data(data):
            relatorio['data'] = data
            break
        else:
            print("Data inv√°lida. Tente novamente.")

    relatorios.append(relatorio)
    salvar_json()
    print("‚úÖ Relat√≥rio cadastrado com sucesso!")

def listar_relatorios():
    """Lista todos os relat√≥rios cadastrados."""
    if not relatorios:
        print("‚ö†Ô∏è Nenhum relat√≥rio cadastrado.")
        return

    print("\nüìÑ Relat√≥rios cadastrados:")
    for r in relatorios:
        print(f"ID: {r['id']} | T√≠tulo: {r['titulo']} | Data: {r['data']}")

def buscar_relatorio_por_id():
    """Busca um relat√≥rio pelo ID."""
    try:
        id_relatorio = int(input("Digite o ID do relat√≥rio: "))
    except ValueError:
        print("‚ùå ID inv√°lido. Use apenas n√∫meros.")
        return

    for r in relatorios:
        if r['id'] == id_relatorio:
            print(f"\nüîç Relat√≥rio encontrado:")
            print(f"ID: {r['id']}\nT√≠tulo: {r['titulo']}\nDescri√ß√£o: {r['descricao']}\nData: {r['data']}")
            return

    print("‚ùå Relat√≥rio n√£o encontrado.")

def buscar_por_titulo():
    """Busca relat√≥rios contendo parte do t√≠tulo."""
    termo = input("Digite parte do t√≠tulo: ").lower()
    encontrados = [r for r in relatorios if termo in r['titulo'].lower()]

    if encontrados:
        print(f"\nüîç {len(encontrados)} relat√≥rio(s) encontrado(s):")
        for r in encontrados:
            print(f"ID: {r['id']} | T√≠tulo: {r['titulo']} | Data: {r['data']}")
    else:
        print("‚ùå Nenhum relat√≥rio encontrado com esse t√≠tulo.")

def salvar_em_docx():
    """Salva os relat√≥rios em um arquivo Word."""
    if not relatorios:
        print("‚ö†Ô∏è Nenhum relat√≥rio para salvar.")
        return

    doc = Document()
    doc.add_heading('Relat√≥rios de Ronda Cadastrados', level=1)

    for r in relatorios:
        doc.add_heading(r['titulo'], level=2)
        doc.add_paragraph(f"ID: {r['id']}")
        doc.add_paragraph(f"Descri√ß√£o: {r['descricao']}")
        #doc.add_paragraph(f"Data: {r['data']}")
        doc.add_paragraph("-" * 40)

    doc.save('relatorios.docx')
    print("üìÅ Relat√≥rios salvos em 'relatorios.docx'.")

def salvar_em_txt():
    """Salva os relat√≥rios em um arquivo .txt."""
    if not relatorios:
        print("‚ö†Ô∏è Nenhum relat√≥rio para salvar.")
        return

    with open('relatorios.txt', 'w', encoding='utf-8') as f:
        for r in relatorios:
            f.write(f"ID: {r['id']}\nT√≠tulo: {r['titulo']}\nDescri√ß√£o: {r['descricao']}\nData: {r['data']}\n")
            f.write("-" * 40 + "\n")

    print("üìÅ Relat√≥rios salvos em 'relatorios.txt'.")

def enviar_email(destinatario, assunto, corpo):
    """Envia os relat√≥rios por e-mail."""
    smtp_server = 'smtp.gmail.com'
    smtp_port = 587
    smtp_user = 'seu email'
    smtp_password = 'sua senha'  # Substitua por vari√°vel de ambiente para seguran√ßa

    msg = EmailMessage()
    msg['Subject'] = assunto
    msg['From'] = smtp_user
    msg['To'] = destinatario
    msg.set_content(corpo)

    try:
        with smtplib.SMTP(smtp_server, smtp_port) as server:
            server.starttls()
            server.login(smtp_user, smtp_password)
            server.send_message(msg)
            print("üìß Email enviado com sucesso!")
    except Exception as e:
        print(f"‚ùå Erro ao enviar e-mail: {e}")

def enviar_relatorios_por_email():
    """Gera um resumo dos relat√≥rios e envia por e-mail."""
    if not relatorios:
        print("‚ö†Ô∏è Nenhum relat√≥rio para enviar.")
        return

    destinatario = input("Digite o e-mail de destino: ")
    assunto = "Relat√≥rios de Ronda"
    corpo = "\n\n".join(
        [f"ID: {r['id']}\nT√≠tulo: {r['titulo']}\nDescri√ß√£o: {r['descricao']}\nData: {r['data']}" for r in relatorios]
    )

    enviar_email(destinatario, assunto, corpo)

# ---------- Menu Principal ----------

def menu():
    carregar_json()
    while True:
        print("\n===== Sistema de Cadastro de Relat√≥rios =====")
        print("1. Cadastrar Relat√≥rio")
        print("2. Listar Relat√≥rios")
        print("3. Buscar Relat√≥rio por ID")
        print("4. Buscar Relat√≥rio por T√≠tulo")
        print("5. Exportar Relat√≥rios para DOCX")
        print("6. Exportar Relat√≥rios para TXT")
        print("7. Enviar Relat√≥rios por Email")
        print("8. Sair")

        opcao = input("Escolha uma op√ß√£o: ")

        if opcao == '1':
            cadastrar_relatorio()
        elif opcao == '2':
            listar_relatorios()
        elif opcao == '3':
            buscar_relatorio_por_id()
        elif opcao == '4':
            buscar_por_titulo()
        elif opcao == '5':
            salvar_em_docx()
        elif opcao == '6':
            salvar_em_txt()
        elif opcao == '7':
            enviar_relatorios_por_email()
        elif opcao == '8':
            print("üëã Saindo do sistema...")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida. Tente novamente.")

# ---------- Execu√ß√£o ----------

if __name__ == "__main__":
    menu()
